/**
 * 急于chrome v8引擎的javascript的运行环境 让js运行在后端  服务端不包含bom dom 没有window
 * 内置了http fs模块等  事件驱动（内部主要靠异步来实现） 非阻塞io模型 node的包管理npm
 * 可以解决的问题：
 * 处理一些高并发（处理多线程同步）同一时间访问服务器
 * 多线程：可以同时处理 但是耗内存
 * 单线程：可以按顺序处理完 在返回回调 不能处理cpu密集 cpu密集指的是 处理运算 压缩 解压 加密 解密
 * IO密集型：读接口、处理文件、网络操作、数据库等
 * node一般做两件事
 * 1.前后端分离 对数据进行二次处理(做中间层) 在返回给前端 node请求java 不存在跨域问题了
 * 2.可以做一些工具 webpack
 * js的主线程是单线程 节约内存
 * 多线程会有锁的问题 先锁住在释放掉 切换的速度比较快 多线程做群发短信 加密
 * 同步异步指的是被调用方（调用了一个方法 这个方法会告诉我是同步还是异步）  阻塞和非阻塞是调用方（调用了一个方法之后的状态）
 * node是异步非阻塞
 * 同步阻塞 ：等待返回结果
 * 异步阻塞 ：（node中没有）
 * 同步非阻塞： 发多次请求等待多个结果
 * 异步非阻塞：多次发请求 知道有一个返回结果停止
 *
 * node中的event loop node的内核为labuv
 * 内部是靠多线程实现的异步 node内部会生成多个线程 当线程返回结果会生成一个队列 队列会依次吧结果返回给
 * **/

